<?hh // strict

/**
 * This file is generated by invoking `hackmini commands:build`.
 * Do not manually edit this file.
 */

use HackPack\HackMini\Command\Definition;

function commands() : Map<string, Definition>
{
    return Map{
        'user:create' => shape(
            'arguments' => Vector{
                shape(
                    'name' => 'name',
                    'default' => 'default',
                ),
            },
            'options' => Vector{
                shape(
                    'name' => 'title',
                    'alias' => 't',
                    'value required' => true,
                    'default' => 'default',
                ),
            },
            'handler' => fun('HackPack\HackMini\Sample\createUserFromCli'),
            'middleware' => Vector{
                class_meth('HackPack\HackMini\Sample\ShowColors', 'factory'),
            },
        ),
        'commands:build' => shape(
            'arguments' => Vector{},
            'options' => Vector{
                shape(
                    'name' => 'include-path',
                    'alias' => 'i',
                    'value required' => true,
                ),
                shape(
                    'name' => 'exclude-path',
                    'alias' => 'e',
                    'value required' => true,
                ),
            },
            'handler' => fun('HackPack\HackMini\Command\buildCommandsCommand'),
            'middleware' => Vector{},
        ),
        'container:build' => shape(
            'arguments' => Vector{},
            'options' => Vector{
                shape(
                    'name' => 'include-path',
                    'alias' => 'i',
                    'value required' => true,
                ),
                shape(
                    'name' => 'exclude-path',
                    'alias' => 'e',
                    'value required' => true,
                ),
            },
            'handler' => fun('HackPack\HackMini\Container\buildContainerCommand'),
            'middleware' => Vector{},
        ),
        'routes:build' => shape(
            'arguments' => Vector{},
            'options' => Vector{
                shape(
                    'name' => 'include-path',
                    'alias' => 'i',
                    'value required' => true,
                ),
                shape(
                    'name' => 'exclude-path',
                    'alias' => 'e',
                    'value required' => true,
                ),
            },
            'handler' => fun('HackPack\HackMini\Routes\buildRoutes'),
            'middleware' => Vector{},
        ),
        'some-command' => shape(
            'arguments' => Vector{},
            'options' => Vector{},
            'handler' => class_meth(HackPack\HackMini\Sample\HandlerClass::class, 'someCommand'),
            'middleware' => Vector{},
        ),
    };
}