<?hh // strict

/**
 * This file is generated by invoking `hackmini commands:build`.
 * Do not manually edit this file.
 */

use HackPack\HackMini\Container\Exception\CircularDependency;

final class FactoryContainer
{

    <<__Memoize>>
    public function getServerRequest() : \HackPack\HackMini\Message\Request
    {
        return $this->newServerRequest();
    }

    public function newServerRequest() : \HackPack\HackMini\Message\Request
    {
        return $this->__build__('ServerRequest', fun('HackPack\HackMini\Message\buildRequestFromGlobals'));
    }


    <<__Memoize>>
    public function getServerBody() : \HackPack\HackMini\Message\StreamBody
    {
        return $this->newServerBody();
    }

    public function newServerBody() : \HackPack\HackMini\Message\StreamBody
    {
        return $this->__build__('ServerBody', fun('HackPack\HackMini\Message\buildServerBodyFromGlobals'));
    }


    <<__Memoize>>
    public function getAuth() : HackPack\HackMini\Sample\Auth
    {
        return $this->newAuth();
    }

    public function newAuth() : HackPack\HackMini\Sample\Auth
    {
        return $this->__build__('Auth', class_meth('HackPack\HackMini\Sample\Auth', 'factory'));
    }


    <<__Memoize>>
    public function getDb() : HackPack\HackMini\Sample\PdoDb
    {
        return $this->newDb();
    }

    public function newDb() : HackPack\HackMini\Sample\PdoDb
    {
        return $this->__build__('Db', class_meth('HackPack\HackMini\Sample\PdoDb', 'factory'));
    }


    <<__Memoize>>
    public function getMockDb() : HackPack\HackMini\Sample\MockDb
    {
        return $this->newMockDb();
    }

    public function newMockDb() : HackPack\HackMini\Sample\MockDb
    {
        return $this->__build__('MockDb', class_meth('HackPack\HackMini\Sample\MockDb', 'factory'));
    }


    <<__Memoize>>
    public function getNewUserPage() : NewUserPage
    {
        return $this->newNewUserPage();
    }

    public function newNewUserPage() : NewUserPage
    {
        return $this->__build__('NewUserPage', class_meth('NewUserPage', 'factory'));
    }


    <<__Memoize>>
    public function getUserDetailPage() : UserDetailPage
    {
        return $this->newUserDetailPage();
    }

    public function newUserDetailPage() : UserDetailPage
    {
        return $this->__build__('UserDetailPage', class_meth('UserDetailPage', 'factory'));
    }


    <<__Memoize>>
    public function getUserStore() : HackPack\HackMini\Sample\UserStore
    {
        return $this->newUserStore();
    }

    public function newUserStore() : HackPack\HackMini\Sample\UserStore
    {
        return $this->__build__('UserStore', class_meth('HackPack\HackMini\Sample\UserStore', 'factory'));
    }


    <<__Memoize>>
    public function getMockUserStore() : HackPack\HackMini\Sample\UserStore
    {
        return $this->newMockUserStore();
    }

    public function newMockUserStore() : HackPack\HackMini\Sample\UserStore
    {
        return $this->__build__('MockUserStore', class_meth('HackPack\HackMini\Sample\UserStore', 'mocked'));
    }


    <<__Memoize>>
    public function getServerResponse() : HackPack\HackMini\Message\Response
    {
        return $this->newServerResponse();
    }

    public function newServerResponse() : HackPack\HackMini\Message\Response
    {
        return $this->__build__('ServerResponse', class_meth('HackPack\HackMini\Message\Response', 'factory'));
    }


    <<__Memoize>>
    public function getWebRouter() : HackPack\HackMini\Router\Web
    {
        return $this->newWebRouter();
    }

    public function newWebRouter() : HackPack\HackMini\Router\Web
    {
        return $this->__build__('WebRouter', class_meth('HackPack\HackMini\Router\Web', 'factory'));
    }


    <<__Memoize>>
    public function getWebApp() : HackPack\HackMini\WebApp
    {
        return $this->newWebApp();
    }

    public function newWebApp() : HackPack\HackMini\WebApp
    {
        return $this->__build__('WebApp', class_meth('HackPack\HackMini\WebApp', 'factory'));
    }

    private Set<string> $names = Set{};

    private function __build__<T>(string $name, (function(this):T) $factory) : T
    {
        if($this->names->contains($name)) {
            throw new CircularDependency($name, $this->names);
        }
        $this->names->add($name);
        $result = $factory($this);
        $this->names->remove($name);
        return $result;
    }
}